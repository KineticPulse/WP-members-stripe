<?php
function stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
 
	$arr = wp_parse_args( get_option( 'wpmembers_experiod' ), get_option( 'wpmembers_stripe' ) );
		
	
	//$arr = apply_filters( 'wpmem_payment_form', $arr );

	extract( $arr );

	$user_id = wpmem_get_user_id();

	$user_info = get_userdata($user_id);
	$email = $user_info->user_email;

		// load the stripe libraries
 require_once(STRIPE_BASE_DIR .'/vendor/stripe/stripe-php/init.php');
		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];
		$amount = $_POST['amount'];
		$plan = $_POST['plan_id'];
		// check if we are using test mode
		if($stripe_live=='0') {
			$secret_key = $stripe_test_secret;
		} else {
			$secret_key = $stripe_live_secret;
		}
 		
 		\Stripe\Stripe::setApiKey($secret_key);
	
 		if ($stripe_cmd=='recurring') {
			try {			
				$customer = \Stripe\Customer::create(array(
						'source' => $token,
						'plan' => $plan,
						'email' => $email
					)
				);	
 
				// successful recurring payment setup
				$wpmem_exp = wpmem_set_exp( $user_id, true );
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
 
			} catch (Exception $e) {
				// redirect on failure
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}

 		} else {
		// attempt to charge the customer's card
			try {
				$charge = \Stripe\Charge::create(array(
						'amount' => $amount,
						'currency' => 'gbp',
						'source' => $token
					)
				);
	 
	 
				// successful payment
				$wpmem_exp = wpmem_set_exp( $user_id, true );
				$redirect = add_query_arg('payment', 'paid', $_POST['redirect']);
	 
			} catch (Exception $e) {
				// redirect on failed payment
				$redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
			}
 		}
		// redirect back to our previous page with the added query variable
		wp_redirect($redirect); 
		exit;
	}
}
add_action('init', 'stripe_process_payment');